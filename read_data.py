import math

import pandas as pd
from collections import namedtuple
import random






# 读取数据

# 读入数据
poi_data = pd.read_csv("./ex_result/data/poi_data.csv", sep=',')
user_data = pd.read_csv("./ex_result/data/user_data.csv", sep=',')
importance_data = pd.read_csv("./ex_result/data/importance.csv", sep=',')
information_data = pd.read_csv("./ex_result/data/information.csv", sep=',')

# print(len(user_data))
# print(user_data.loc[182]['cost'])
# luanxu = [i for i in range(len(user_data))]
# random.shuffle(luanxu)
# print("打乱后的luanxu为：", luanxu)
luanxu = [28, 343, 52, 56, 204, 194, 211, 395, 276, 257, 401, 341, 416, 151, 275, 37, 64, 333, 419, 324, 53, 110, 269, 287, 54, 154, 51, 384, 385, 18, 277, 182, 497, 219, 355, 350, 423, 460, 86, 159, 23, 22, 488, 224, 300, 175, 190, 99, 120, 469, 280, 205, 58, 456, 36, 252, 380, 450, 403, 114, 150, 259, 285, 148, 212, 367, 102, 185, 304, 44, 4, 157, 226, 471, 258, 309, 452, 106, 394, 431, 113, 443, 195, 270, 445, 397, 478, 256, 489, 69, 474, 337, 294, 163, 42, 402, 392, 100, 104, 305, 134, 417, 79, 111, 91, 311, 207, 381, 361, 455, 83, 475, 156, 15, 356, 132, 59, 317, 24, 5, 94, 410, 155, 399, 241, 189, 186, 213, 425, 193, 197, 281, 319, 101, 13, 149, 0, 29, 209, 339, 338, 404, 121, 368, 434, 230, 161, 31, 20, 225, 320, 133, 448, 310, 89, 180, 73, 396, 57, 216, 112, 232, 245, 93, 307, 55, 66, 496, 440, 243, 472, 135, 17, 261, 218, 462, 487, 340, 468, 325, 492, 21, 105, 480, 383, 198, 179, 254, 432, 60, 33, 473, 302, 14, 32, 420, 306, 363, 65, 284, 39, 378, 146, 103, 169, 331, 274, 301, 202, 386, 457, 327, 283, 408, 329, 430, 96, 116, 253, 97, 242, 360, 429, 138, 321, 81, 2, 358, 495, 19, 143, 292, 454, 354, 334, 82, 453, 130, 428, 439, 45, 409, 131, 215, 10, 129, 196, 359, 122, 1, 345, 167, 247, 158, 470, 139, 244, 178, 250, 313, 72, 398, 223, 98, 168, 393, 424, 78, 411, 315, 172, 119, 136, 125, 67, 123, 406, 8, 400, 80, 458, 467, 413, 203, 298, 206, 12, 373, 312, 481, 237, 263, 152, 181, 441, 377, 115, 267, 246, 217, 176, 227, 124, 308, 107, 405, 362, 49, 84, 220, 372, 144, 499, 239, 433, 387, 371, 238, 200, 25, 336, 192, 95, 352, 222, 418, 7, 191, 140, 184, 289, 299, 233, 326, 221, 323, 199, 366, 461, 349, 62, 484, 286, 47, 273, 288, 435, 295, 88, 160, 71, 493, 164, 282, 249, 268, 117, 351, 171, 388, 459, 153, 271, 108, 77, 173, 486, 449, 407, 415, 35, 61, 236, 364, 127, 485, 389, 279, 369, 444, 391, 210, 314, 482, 118, 463, 390, 90, 26, 85, 128, 353, 38, 260, 382, 46, 43, 348, 330, 490, 34, 11, 290, 68, 272, 442, 229, 142, 255, 379, 498, 231, 479, 437, 166, 201, 335, 316, 9, 477, 293, 235, 465, 27, 147, 303, 446, 422, 240, 421, 483, 332, 187, 451, 436, 347, 177, 427, 447, 262, 3, 170, 265, 466, 228, 291, 297, 322, 74, 375, 40, 126, 248, 50, 70, 76, 41, 318, 328, 374, 370, 342, 208, 491, 92, 214, 30, 63, 251, 183, 357, 16, 414, 87, 266, 234, 6, 264, 476, 464, 162, 344, 48, 75, 438, 426, 137, 346, 109, 412, 365, 376, 174, 296, 494, 188, 278, 145, 141, 165]
# [399, 353, 120, 35, 458, 178, 50, 84, 386, 418, 127, 293, 128, 306, 449, 251, 223, 439, 416, 255, 405, 479, 401, 29, 165, 346, 0, 319, 44, 463, 487, 476, 130, 331, 101, 212, 457, 52, 218, 276, 105, 116, 13, 81, 282, 173, 76, 266, 452, 46, 28, 420, 305, 354, 383, 146, 310, 315, 336, 287, 320, 66, 95, 145, 421, 279, 382, 224, 107, 337, 124, 409, 233, 92, 264, 160, 96, 466, 21, 441, 344, 18, 302, 2, 261, 486, 342, 297, 10, 425, 492, 85, 469, 368, 171, 90, 328, 221, 122, 62, 5, 291, 109, 143, 138, 475, 263, 369, 8, 135, 455, 384, 443, 396, 227, 147, 371, 175, 330, 258, 394, 25, 22, 340, 316, 351, 161, 16, 93, 410, 112, 157, 185, 349, 47, 257, 69, 247, 381, 43, 40, 86, 367, 131, 494, 392, 436, 75, 350, 168, 483, 26, 125, 461, 34, 474, 211, 65, 286, 114, 269, 334, 256, 83, 462, 440, 343, 365, 239, 123, 129, 248, 11, 204, 148, 301, 361, 219, 451, 1, 23, 106, 414, 104, 39, 253, 203, 471, 77, 448, 327, 468, 121, 493, 424, 214, 14, 359, 497, 308, 323, 376, 395, 345, 260, 202, 442, 246, 490, 299, 390, 473, 188, 126, 254, 460, 150, 82, 119, 149, 250, 166, 404, 423, 54, 197, 377, 277, 19, 61, 470, 372, 190, 184, 388, 88, 375, 37, 326, 454, 200, 242, 356, 141, 17, 195, 314, 363, 389, 38, 205, 194, 182, 163, 355, 431, 216, 245, 42, 273, 450, 97, 378, 379, 33, 231, 139, 324, 292, 484, 210, 467, 347, 57, 230, 67, 80, 373, 220, 71, 94, 237, 159, 412, 228, 30, 78, 7, 366, 113, 352, 267, 307, 435, 265, 278, 488, 296, 274, 437, 74, 170, 272, 362, 459, 58, 51, 317, 183, 174, 289, 156, 332, 222, 241, 393, 225, 309, 192, 142, 232, 482, 329, 111, 100, 400, 499, 357, 397, 118, 298, 236, 144, 432, 59, 89, 325, 288, 360, 49, 413, 433, 4, 280, 419, 234, 229, 187, 403, 322, 117, 155, 243, 481, 312, 133, 415, 406, 244, 311, 275, 206, 31, 268, 196, 444, 495, 191, 99, 321, 132, 446, 407, 24, 209, 262, 491, 215, 422, 201, 464, 408, 348, 489, 199, 387, 108, 179, 177, 55, 53, 428, 240, 453, 430, 411, 417, 226, 70, 6, 283, 217, 162, 137, 213, 87, 63, 20, 189, 176, 285, 426, 164, 56, 136, 153, 238, 281, 290, 370, 64, 271, 300, 447, 91, 41, 32, 36, 3, 338, 303, 172, 208, 181, 72, 60, 9, 335, 295, 478, 27, 498, 45, 445, 485, 402, 152, 151, 477, 198, 207, 427, 465, 374, 480, 391, 284, 438, 180, 341, 12, 380, 158, 456, 48, 193, 167, 134, 73, 472, 358, 364, 294, 339, 115, 98, 103, 304, 186, 385, 110, 68, 259, 313, 252, 235, 429, 270, 15, 102, 398, 318, 496, 140, 169, 249, 154, 333, 434, 79]
# u_luanxu_ = luanxu[:200]

# print("下面是打乱的：")
# initial_poi = [i for i in range(len(poi_data))]
# random.shuffle(initial_poi)
daluan_poi = [49, 36, 26, 34, 7, 29, 17, 18, 10, 30, 4, 20, 44, 14, 13, 21, 11, 37, 1, 41, 42, 38, 28, 5, 0, 2, 16, 33, 39, 48, 32, 15, 12, 31, 46, 40, 22, 27, 9, 45, 25, 3, 24, 35, 8, 19, 47, 23, 43, 6]
# print(initial_poi)

# for i in range(80):
#     user_data.loc[u_luanxu_[i]]['cost'] = user_data.loc[u_luanxu_[i]]['bid'] + math.ceil(0.5*(user_data.loc[u_luanxu_[i]]['bid']-user_data.loc[u_luanxu_[i]]['cost']))

# print(len(user_data))

# 变为标准
# POI变为标准
poi_property = namedtuple("poi_pro", ["name", "values", "times"])
# POI的最后格式
POI_fina_set = []
for i in range(len(poi_data)):
    POI_fina_set.append(poi_property("poi_{0}".format(i), poi_data.iloc[i][0], poi_data.iloc[i][1]))
print("POI_fina_set is ", POI_fina_set[2])

# 用户变为标准
# user的最后格式
user_property = namedtuple("name_pro", ["user_name", "POI_select", "cost", "bid"])

user_data_set = []
for i in range(len(user_data)):
    user_data_set.append(user_property("user_{0}".format(i), tuple(user_data.iloc[i, 0:len(poi_data)]), user_data.iloc[i][len(poi_data)], user_data.iloc[i][1+len(poi_data)]))

# print(user_data_set[2].cost)
# user_data_set[2]["cost"] = 1000
# print(user_data_set[2].cost)

# print("sdfasdf" * 20)
#
# print(user_data_set[182].cost)
# print(user_data_set[182].bid)



# 指数
exponent_k = information_data.iloc[0][0]
# print(exponent_k)
# 预算
# Budget = int(information_data.iloc[0][1])
Budget = 200
# print(Budget)
# 生成用户数量
users_number = int(information_data.iloc[0][2])
# print(users_number)

# POI点个数
POI_number = int(information_data.iloc[0][3])
print(POI_number)
# print(POI_number)
# 定义POI点的重要程度
# 即每个POI点的重要程度1~10
importance = list(importance_data['importance'])
# print(importance)



# # 下面是需要的函数：
# # 价值函数
# def value_fun(user_list):
#
#     if len(user_list) == 0:
#         return 0
#
#     total_values = 0
#     # user_list是选中用户的下标的列表
#     for poi in range(POI_number):
#         # 单个POI点的价值
#         sum_users = 0
#         for i in range(len(user_list)):
#             # 计算参与点poi的用户数
#             sum_users = user_data_set[user_list[i]].POI_select[poi] + sum_users
#
#         min_times = min(sum_users, POI_fina_set[poi].times)
#         # print("POI点:", poi, "     有效参与人数为：", min_times)
#         # print(POI_fina_set[poi].values, " * " * 5, min_times, " * " * 5, POI_fina_set[poi].times)
#         single_value = POI_fina_set[poi].values * (min_times / POI_fina_set[poi].times) ** exponent_k
#         # print("单个POI点：", poi, "的价值为：", single_value)
#
#         total_values = total_values + single_value
#
#     return total_values
#
# # 用户对集合S产生的边际价值
# def user_marginal_value(select_u_list, user_i):
#     userrr = select_u_list.copy()
#     userrr.append(user_i)
#     return value_fun(userrr) - value_fun(select_u_list)
#
#
# # 看给定集合使用的预算
# def Budget_of_use(select_user_list):
#     sum_Budget = 0
#     for i in select_user_list:
#         sum_Budget += user_data_set[i].cost
#     return sum_Budget
#
#
# # 看给定集合的POI点覆盖次数
# def print_POI_cover(select_user_list):
#     poi_cover = [0] * POI_number
#     for s_u in select_user_list:
#         poi_sum = 0
#         for i in range(POI_number):
#             if user_data_set[s_u].POI_select[i] == 1:
#                 poi_cover[i] += 1
#
#     print(poi_cover)


